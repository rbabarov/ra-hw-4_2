{"version":3,"sources":["components/Form/Form.jsx","components/Item/Item.jsx","components/List/List.jsx","Steps.jsx","index.js"],"names":["Form","onSubmit","useState","date","setDate","km","setKm","className","e","preventDefault","id","nanoid","parseFloat","type","placeholder","value","onChange","target","Item","onDeleteNote","formattedDate","moment","format","onClick","List","props","notes","length","notesSortedByDateFromNew","map","note","sort","a","b","Intl","Collator","compare","o","INITIAL_NOTES","Steps","setNotes","newNote","indexOfDate","findIndex","item","prevNotes","newNotes","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAIe,SAASA,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SAAY,EACjBC,mBAAS,IADQ,mBAClCC,EADkC,KAC5BC,EAD4B,OAMrBF,mBAAS,IANY,mBAMlCG,EANkC,KAM9BC,EAN8B,KA4BzC,OACE,qBAAKC,UAAU,iBAAf,SACE,uBAAMA,UAAU,OAAON,SAdN,SAACO,GACpBA,EAAEC,iBACEN,IACFF,EAAS,CACPS,GAAIC,cACJR,OACAE,GAAIO,WAAWP,IAAO,IAV1BD,GAAQ,iBAAM,MACdE,GAAM,iBAAM,QAiBV,UACE,uBAAOC,UAAU,YAAYM,KAAK,OAAOC,YAAY,qDAAaC,MAAOZ,EAAMa,SA7B7D,SAACR,GACvBJ,GAAQ,kBAAMI,EAAES,OAAOF,YA6BnB,uBAAOR,UAAU,UAAUM,KAAK,OAAOC,YAAY,iBAAOC,MAAOV,EAAIW,SAzBrD,SAACR,GACrBF,GAAM,kBAAME,EAAES,OAAOF,YAyBjB,wBAAQR,UAAU,WAAWM,KAAK,SAAlC,mE,oBCjCO,SAASK,EAAT,GAA8C,IAA/Bf,EAA8B,EAA9BA,KAAME,EAAwB,EAAxBA,GAAIc,EAAoB,EAApBA,aAAcT,EAAM,EAANA,GAC9CU,EAAgBC,IAAOlB,GAAMmB,OAAO,cAE1C,OACE,sBAAKf,UAAU,OAAf,UACE,qBAAKA,UAAU,YAAf,SAA4Ba,IAC5B,qBAAKb,UAAU,UAAf,SAA0BF,IAC1B,qBAAKE,UAAU,qBAAf,SACE,qBAAKA,UAAU,0BAA0BgB,QAAS,kBAAMJ,EAAaT,IAArE,iCCRO,SAASc,EAAKC,GAAQ,IAC3BC,EAAUD,EAAVC,MAER,IAAKA,EAAMC,OACT,OACE,qBAAKpB,UAAU,qBAAf,+PAIJ,IACMqB,EADWF,EAAMG,KAAI,SAACC,GAAD,OAAUA,KACKC,MAAK,SAACC,EAAGC,GAEjD,OADiB,IAAIC,KAAKC,UACVC,QAAQH,EAAE9B,KAAM6B,EAAE7B,SAGpC,OACE,gCACE,sBAAKI,UAAU,eAAf,UACE,qBAAKA,UAAU,oBAAf,sCACA,qBAAKA,UAAU,kBAAf,6BAEF,qBAAKA,UAAU,YAAf,SACGqB,EAAyBC,KAAI,SAACQ,GAAD,OAC5B,cAACnB,EAAD,CAEER,GAAI2B,EAAE3B,GACNP,KAAMkC,EAAElC,KACRE,GAAIgC,EAAEhC,GACNc,aAAcM,EAAMN,cAJfkB,EAAE3B,Y,UCtBb4B,EAAgB,CACpB,CAAE5B,GAAIC,cAAUR,KAAM,aAAcE,GAAI,KACxC,CAAEK,GAAIC,cAAUR,KAAM,aAAcE,GAAI,MAG3B,SAASkC,IAAS,IAAD,EAEJrC,mBAASoC,GAFL,mBAEvBZ,EAFuB,KAEhBc,EAFgB,KAqB9B,OACE,sBAAKjC,UAAU,MAAf,UACE,iCACE,yHAEF,cAACP,EAAD,CAAMC,SAtBY,SAACwC,GACrB,IAAMC,EAAchB,EAAMiB,WAAU,SAACC,GAAD,OAAUA,EAAKzC,OAASsC,EAAQtC,QAElEqC,GADmB,IAAjBE,EACO,SAACG,GAAD,4BAAmBA,GAAnB,CAA8BJ,KAE9B,SAACI,GACR,IAAMC,EAAQ,YAAOD,GAErB,OADAC,EAASJ,GAAarC,IAAMoC,EAAQpC,GAC7ByC,OAeT,cAACtB,EAAD,CAAME,MAAOA,EAAOP,aAVC,SAACT,GACxB8B,GAAS,SAACK,GAAD,OAAeA,EAAUE,QAAO,SAACjB,GAAD,OAAUA,EAAKpB,KAAOA,cCxBnEsC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.418c90fc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nexport default function Form({ onSubmit }) {\n  const [date, setDate] = useState('');\n  const handleDateInput = (e) => {\n    setDate(() => e.target.value);\n  };\n\n  const [km, setKm] = useState('');\n  const handleKmInput = (e) => {\n    setKm(() => e.target.value);\n  };\n\n  const resetForm = () => {\n    setDate(() => '');\n    setKm(() => '');\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (date) {\n      onSubmit({\n        id: nanoid(),\n        date,\n        km: parseFloat(km) || 0,\n      });\n      resetForm();\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <input className=\"form-date\" type=\"date\" placeholder=\"дд.мм.гггг\" value={date} onChange={handleDateInput} />\n        <input className=\"form-km\" type=\"text\" placeholder=\"0 км\" value={km} onChange={handleKmInput} />\n        <button className=\"form-add\" type=\"submit\">Добавить</button>\n      </form>\n    </div>\n  );\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nexport default function Item({date, km, onDeleteNote, id,}) {\n  const formattedDate = moment(date).format(\"DD.MM.YYYY\");\n\n  return (\n    <div className=\"item\">\n      <div className=\"item-date\">{formattedDate}</div>\n      <div className=\"item-km\">{km}</div>\n      <div className=\"item-buttons-block\">\n        <div className=\"item-del material-icons\" onClick={() => onDeleteNote(id)}>delete_outline</div>\n      </div>\n    </div>\n  );\n}\n\nItem.propTypes = {\n  date: PropTypes.string.isRequired,\n  km: PropTypes.number.isRequired,\n  onDeleteNote: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Item from '../Item/Item';\n\nexport default function List(props) {\n  const { notes } = props;\n\n  if (!notes.length) {\n    return (\n      <div className=\"list-empty-message\">Нет записей. Начинай тренироваться и добавляй!</div>\n    );\n  }\n\n  const arrNotes = notes.map((note) => note);\n  const notesSortedByDateFromNew = arrNotes.sort((a, b) => {\n    const collator = new Intl.Collator();\n    return collator.compare(b.date, a.date);\n  });\n\n  return (\n    <div>\n      <div className=\"list-headers\">\n        <div className=\"list-headers-date\">Дата</div>\n        <div className=\"list-headers-km\">Км</div>\n      </div>\n      <div className=\"list-list\">\n        {notesSortedByDateFromNew.map((o) => (\n          <Item\n            key={o.id}\n            id={o.id}\n            date={o.date}\n            km={o.km}\n            onDeleteNote={props.onDeleteNote}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nList.propTypes = {\n  notes: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    date: PropTypes.string.isRequired,\n    km: PropTypes.number.isRequired,\n  })).isRequired,\n  onDeleteNote: PropTypes.func.isRequired,\n};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport Form from './components/Form/Form';\nimport List from './components/List/List';\nimport './Steps.css';\n\nconst INITIAL_NOTES = [\n  { id: nanoid(), date: '2000-01-01', km: 300 },\n  { id: nanoid(), date: '2001-11-15', km: 400 },\n];\n\nexport default function Steps() {\n\n  const [notes, setNotes] = useState(INITIAL_NOTES);\n\n  const handleAddNote = (newNote) => {\n    const indexOfDate = notes.findIndex((item) => item.date === newNote.date);\n    if (indexOfDate === -1) {\n      setNotes((prevNotes) => [...prevNotes, newNote]);\n    } else {\n      setNotes((prevNotes) => {\n        const newNotes = [...prevNotes];\n        newNotes[indexOfDate].km += newNote.km;\n        return newNotes;\n      });\n    }\n  };\n\n  const handleDeleteNote = (id) => {\n    setNotes((prevNotes) => prevNotes.filter((note) => note.id !== id));\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Учёт тренировок</h1>\n      </header>\n      <Form onSubmit={handleAddNote} />\n      <List notes={notes} onDeleteNote={handleDeleteNote} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Steps from './Steps';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Steps />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}